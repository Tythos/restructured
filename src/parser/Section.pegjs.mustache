Section =
  BlankLines?
  IsSubSection
  title:(SectionWithOverline / SectionWithoutOverline)
  children:((IsSubSection Section) / (!IsSection Transition) / (!IsSection BodyElement))* {
    sectionState.popSection();

    return new Elements.Section({ children: [title].concat(mapByIndex(children, 1)), position: location() });
  }

IsSection = &(BlankLines? SectionLine !BlankLines RawLine SectionLine) /
  &(BlankLines? RawLine SectionLine)

IsSubSection =
  &(
    BlankLines? overline:SectionLine !BlankLines RawLine underline:SectionLine &{
      if (overline.line[0] !== underline.line[0]) { return false; }
      return sectionState.isSubSection(underline.line[0], true);
    }
  ) /
  &(
    BlankLines? line:RawLine underline:SectionLine &{
      return sectionState.isSubSection(underline.line[0], false);
    }
  )

SectionWithOverline =
  &(SectionLine !BlankLines RawLine SectionLine)
  overline:SectionLine
  Whitespace* children:OnelineParagraph Newline
  underline:SectionLine {
    sectionState.setNextSection(underline.line[0], true);
    return new Elements.Title({ children });
  }

SectionWithoutOverline =
  &(!BlankLines RawLine SectionLine)
  children:OnelineParagraph Newline
  underline:SectionLine {
    sectionState.setNextSection(underline.line[0], false);
    return new Elements.Title({ children });
  }

SectionLine =
  line:('!' / '"' / '#' / '$' / '%' / '&'/ "'" / '(' / ')' /
        '*' / '+' / ',' / '-' / '.' / '/' / ':' / ';' / '<' /
        '=' / '>' / '?' / '@' / '[' / '\\' / ']' / '^' / '_' /
        '`' / '{' / '|' / '}' / '~')+ &{
    return line.length >= 2 && _.uniq(line).length === 1
  } Whitespace* Newline {
    return {line: line.join('')}
  }
