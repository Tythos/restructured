BlockQuote = NestedBlockQuote / SimpleBlockQuote

BlockQuoteBody =
  head:BodyElementExceptBlockQuote
  tail:(!Attribution BodyElement)* {
    return [head].concat(_.map(tail, function (v) { return v[1]; }));
  }

Attribution =
  BlankLines
  SameIndent ('---' / '--' / '\u2014') Whitespace* &(!Endline .)
  AttributionIndent
  &{ indentIgnoreLine = location().start.line; return true; }
  body:Paragraph
  Dedent {
    return new Elements.Attribution({ children: body.children });
  }

AttributionIndent =
  &(
    RawLine // skip first line
    &{ attributesIndentList = []; return true; }
    (
      i:Whitespace+
      !Endline
      RawLine
      &{
        var size = ParserUtil.calcIndentSize(i);
        if (size < currentIndentSize) { return false; }
        attributesIndentList.push(size);
        return true;
      }
    )*
    &{
      if (_.uniq(attributesIndentList).length > 1) {
        return false;
      }
      nextIndentSize = 10000;
      if (attributesIndentList.length != 0) {
        nextIndentSize = attributesIndentList[0];
      }
      indentSizeStack.push(currentIndentSize);
      currentIndentSize = nextIndentSize;
      return true;
    }
  )

NestedBlockQuote =
  BlankLines?
  BlockQuoteIndent
  nested:BlockQuoteBody
  attribution:Attribution?
  &{ prevIndentSize = currentIndentSize; return true; }
  Dedent
  &(
    BlankLines
    i:Whitespace*
    &{ return ParserUtil.calcIndentSize(i) < prevIndentSize; }
  )
  outer:BlockQuote {
    var children = [
      new Elements.BlockQuote({ children: nested, attribution: attribution }),
    ].concat(outer.children.toArray());
    return new Elements.BlockQuote({ children: children });
  }

SimpleBlockQuote =
  BlankLines?
  BlockQuoteIndent
  children:BlockQuoteBody
  attribution:Attribution?
  Dedent {
    return new Elements.BlockQuote({ children: children, attribution: attribution });
  }

BlockQuoteIndent =
  &(i:Whitespace+
    &{
      var indentSize = ParserUtil.calcIndentSize(i);
      if (indentSize <= currentIndentSize) { return false; }
      indentSizeStack.push(currentIndentSize);
      currentIndentSize = indentSize;
      return true;
    })
