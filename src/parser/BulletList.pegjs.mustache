BulletList =
  BlankLines?
  &(SameIndent b:BulletListItemMarker NormalizedToWhitespace &{ bulletListState.pushBullet(b); return true; })
  head:BulletListItem
  tail:(BlankLines? BulletListItem)* {
    bulletListState.popBullet();
    var children = [head].concat(tail.map(function (t) { return t[1]; }));
    return new Elements.BulletList({ children: children });
  }

BulletListItemMarker = [*+\-•‣⁃]

BulletListItem =
  SameIndent
  b:BulletListItemMarker
  &{ return bulletListState.isSameBullet(b); }
  body:(BulletListItemBody / EmptyBulletListItemBody) {
    return new Elements.ListItem({ children: body })
  }

BulletListItemBody = (BulletListIndent body:BodyElement* Dedent) { return body; }
EmptyBulletListItemBody = Whitespace* Endline { return []; }

BulletListIndent =
  i:Whitespace+ &(!NormalizedToWhitespace .) {
    var nextIndentSize = currentIndentSize + ParserUtil.calcIndentSize(i) + 1;
    indentIgnoreLine = location().start.line;
    indentSizeStack.push(currentIndentSize);
    currentIndentSize = nextIndentSize;
  } /
  (Whitespace* Newline)+ &DeepIndent i:Whitespace+ &(!NormalizedToWhitespace .) {
    var nextIndentSize = ParserUtil.calcIndentSize(i);
    indentIgnoreLine = location().end.line;
    indentSizeStack.push(currentIndentSize);
    currentIndentSize = nextIndentSize;
  }
