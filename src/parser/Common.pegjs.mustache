AlphanumericAscii = [A-Za-z0-9]
Eof = !.
Newline = '\n' / last:('\r' '\n'?) { return last[0] + (last[1] || ''); }
Whitespace = ' ' / '\v' / '\f' / '\t'
Endline = Newline / Eof
NormalizedToWhitespace = Whitespace / Newline
Nonspacechar = c:(!NormalizedToWhitespace .) { return c[1]; }

BlankLines =
  lines:(Whitespace* Newline &(Whitespace* Endline))*
  last:(Whitespace* Endline) {
    var ret = _.map(lines, function (line) { return line[0].join('') + line[1]; });
    return ret.concat(last[0].join('') + (last[1] || ''));
  }

RawLine =
  raw:(!Endline .)* Endline {
    return { raw: _.map(raw, function (v) { return v[1]; }).join('') };
  }

NotEmptyRawLine =
  raw:(!Endline .)+ Endline {
    return { raw: _.map(raw, function (v) { return v[1]; }).join('') };
  }

UnknownLine = line:NotEmptyRawLine {
  return new Elements.UnknownLine({ value: line.raw });
}

EndIndent = &(
  BlankLines?
  i:Whitespace* !NormalizedToWhitespace . &{
    return ParserUtil.calcIndentSize(i) < currentIndentSize
  })

SameIndent =
  i:Whitespace* &{
    var ignore = indentIgnoreLine === location().start.line;
    return ignore || ParserUtil.calcIndentSize(i) === currentIndentSize;
  } {
    return i.join('');
  }

DeepIndent = i:Whitespace+ &{ return ParserUtil.calcIndentSize(i) > currentIndentSize; } {
  return i.join('');
}
ShallowIndent = i:Whitespace* &{ return ParserUtil.calcIndentSize(i) < currentIndentSize; } {
  return i.join('');
}
SameOrDeepIndent = i:Whitespace* &{ return ParserUtil.calcIndentSize(i) >= currentIndentSize; } {
  return i.join('');
}

Fail$ = &{ return false; } .

PopIndent$ = &{ indentState.pop(); return true; }

FailbackIndent$ = PopIndent$ Fail$

PushCommonIndent$ =
  &DeepIndent
  &(
    w1:Whitespace+ RawLine &{
      nextIndentSize = ParserUtil.calcIndentSize(w1);
      return true;
    }
    (
      (Whitespace* Newline) /
        (&DeepIndent w2:Whitespace+ RawLine &{
          nextIndentSize = Math.min(nextIndentSize, ParserUtil.calcIndentSize(w2));
          return true;
        })
    )* &{ indentState.push(nextIndentSize); return true; }
  ) {
    return { size: currentIndentSize, diff: indentState.lastIndentDiff() };
  }

PushFirstIndent$ =
  &(i:DeepIndent c:Nonspacechar &{
    indentState.push(ParserUtil.calcIndentSize(i));
    return true;
  }) {
    return { size: currentIndentSize, diff: indentState.lastIndentDiff() };
  }

SkipIndentCheck$ = &{ indentState.ignore(location().start.line); return true; }
