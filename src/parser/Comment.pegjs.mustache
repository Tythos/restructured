Comment = CommentStartFromFirstLine / CommentStartFromNextLine

CommentStartFromFirstLine =
  SameIndent '..' Whitespace+ &Nonspacechar head:RawLine tail:(BlankLines? CommentBlock)? {
    var children = [new Elements.Text({ value: head.raw })];
    if (!_.isNull(tail)) {
      children = children.concat(tail[1].children);
    }
    return new Elements.Comment({ children });
  }

CommentStartFromNextLine =
  SameIndent '..' Whitespace* Newline comment:CommentBlock? {
    if (!_.isNull(comment)) {
      return comment;
    }
    return new Elements.Comment({ });
  }

CommentBlock =
  indent:PushCommonIndent$
  comments:(
    (Whitespace* Newline { return null; } / SameOrDeepIndent NotEmptyRawLine)+ /
      FailbackIndent$
  )
  PopIndent$ {
    var children = _.map(_.reject(comments, _.isNull), function (v) {
      var ws = v[0], raw = v[1].raw;
      var text = _.repeat(' ', ws.length - indent.size) + raw;
      return new Elements.Text({ value: text });
    });
    return new Elements.Comment({ children });
  }
