// Utility for Paragraph
InlineMarkupPreceding = c:. &{ return ParserUtil.isInlineMarkupPrefix(c); } { return c; }
InlineMarkupStartString = '**' / '*' / '``' / '`' / '|' / '_`'
InlineMarkupBeggining =
  p:InlineMarkupPreceding s:InlineMarkupStartString !Endline !Whitespace f:. &{
    return !(p === '*' && s === '*') && !ParserUtil.isMatchPunctuations(p, f);
  } / InlineMarkupPreceding (FootnoteReference /
                             CitationReference /
                             AnonymousSimpleHyperlinkReference /
                             NamedSimpleHyperlinkReference)

Paragraph = children:(SameIndent ParagraphBlock)+ &(BlankLines / EndIndent) {
  return new Elements.Paragraph({ children: _.flatten(mapByIndex(children, 1)) });
}

ParagraphBlock =
  children:(!BlankLines (InlineMarkup / ParagraphText))+ last:Endline {
    var texts = mapByIndex(children, 1);
    if (last) {
      if (texts[texts.length - 1].type !== 'text') {
        return texts.concat(new Text({ text: last }));
      }
      texts[texts.length - 1] = new Text({ text: texts[texts.length - 1].text + last });
    }
    return texts;
  }

ParagraphText =
  text:(!Endline !InlineMarkupBeggining .)+ &Endline {
    return new Text({ text: mapByIndex(text, 2).join('') });
  } / text:(!Endline !InlineMarkupBeggining .)* last:InlineMarkupPreceding {
    return new Text({ text: mapByIndex(text, 2).join('') + last});
  }

OnelineParagraph = (InlineMarkupWithoutNewline / OnelineText)+

OnelineText =
  text:(!Endline !InlineMarkupBeggining .)+ last:(!Endline InlineMarkupPreceding)? {
    var s = mapByIndex(text, 2).join('');
    if (!_.isNull(last)) { s += last[1]; }
    return new Text({ text: s });
  } / text:(!Endline !InlineMarkupBeggining .)* last:(!Endline InlineMarkupPreceding) {
    var s = mapByIndex(text, 2).join('') + last[1];
    return new Text({ text: s });
  }
