InlineMarkupFollowing =
  Endline / c:. &{ return ParserUtil.isInlineMarkupSuffix(c); }

InlineMarkup =
  StrongEmphasis /
  Emphasis /
  InlineLiteral /
  InlineInternalTarget /
  HyperlinkReference /
  InterpretedText /
  SubstitutionReference /
  FootnoteReference /
  CitationReference

// TODO(seikichi): support more inline literals
InlineMarkupWithoutNewline =
  StrongEmphasisWithoutNewline /
  EmphasisWithoutNewline /
  InlineLiteralWithoutNewline

MarkupEndString =
  &{ return markupEndString.length === 1 } s:(.) &{ return s === markupEndString; } /
  &{ return markupEndString.length === 2 } s:(..) &{ return s.join('') === markupEndString; } /
  &{ return markupEndString.length === 3 } s:(...) &{ return s.join('') === markupEndString; }

MarkupTextWithoutNewline =
  text:(
    !Newline
    !(
      !NormalizedToWhitespace
      (&{ return markupEndString === '``' } / !'\\')
      .
      MarkupEndString
      InlineMarkupFollowing
    )
  .)+ {
    return new Text({ value: mapByIndex(text, 2).join('') });
  }

MarkupTextWithoutIndent =
  text:MarkupTextWithoutNewline
  last:Newline? {
    if (!_.isNull(last)) {
      text = new Text({ value: text.value + last})
    }
    return text;
  }

MarkupTailWithoutNewline =
  text:MarkupTextWithoutNewline
  !Endline !NormalizedToWhitespace last:.
  MarkupEndString
  &InlineMarkupFollowing {
    return [new Text({ value: text.value + last })]
  }

MarkupTail =
  first:MarkupTextWithoutIndent?
  middle:(SameIndent MarkupTextWithoutIndent)*
  !Endline !NormalizedToWhitespace last:.
  MarkupEndString
  &InlineMarkupFollowing {
    var children = (_.isNull(first) ? [] : [first]).concat(mapByIndex(middle, 1));
    if (children.length === 0) {
      children.push(new Text({ value: '' }));
    }
    var lastText = children[children.length - 1];
    children[children.length - 1] = new Text({ value: lastText.value + last });
    return children;
  }

Emphasis =
  ('*' !'*' !NormalizedToWhitespace)
  &{ markupEndString = '*'; return true; }
  children:MarkupTail {
    return new Elements.Emphasis({ children });
  }

EmphasisWithoutNewline =
  ('*' !'*' !NormalizedToWhitespace)
  &{ markupEndString = '*'; return true; }
  children:MarkupTailWithoutNewline {
    return new Elements.Emphasis({ children });
  }

StrongEmphasis =
  ('**' !NormalizedToWhitespace)
  &{ markupEndString = '**'; return true; }
  children:MarkupTail {
    return new Elements.Strong({ children });
  }

StrongEmphasisWithoutNewline =
  ('**' !NormalizedToWhitespace)
  &{ markupEndString = '**'; return true; }
  children:MarkupTailWithoutNewline {
    return new Elements.Strong({ children });
  }

InterpretedText =
  role:(':' (!Endline !Whitespace !':' .)+ ':')?
  ('`' !NormalizedToWhitespace)
  &{ markupEndString = '`'; return true; }
  children:MarkupTail {
    var roleStr = null;
    if (!_.isNull(role)) {
      roleStr = _.map(role[1], function (v) { return v[3]; }).join('');
    }
    return new Elements.InterpretedText({ role: roleStr, children });
  }

// TODO(seikichi): unescaped backslash preceding a start-string end-string
InlineLiteral =
  ('``' !NormalizedToWhitespace)
  &{ markupEndString = '``'; return true; }
  children:MarkupTail {
    return new Elements.Literal({ children });
  }

InlineLiteralWithoutNewline =
  ('``' !NormalizedToWhitespace)
  &{ markupEndString = '``'; return true; }
  children:MarkupTailWithoutNewline {
    return new Elements.Literal({ children });
  }

SubstitutionReference =
  ('|' !NormalizedToWhitespace)
  &{ markupEndString = '|'; return true; }
  children:MarkupTail {
    return new Elements.SubstitutionReference({ children });
  }

InlineInternalTarget =
  ('_`' !NormalizedToWhitespace)
  &{ markupEndString = '`'; return true; }
  children:MarkupTail {
    return new Elements.InlineInternalTarget({  children });
  }

FootnoteLabel =
  label:([0-9]+ / '#' ReferenceName / '#' / '*') {
    if (_.isArray(label)) {
      return label.join('');
    }
    return label;
  }

FootnoteReference =
  '[' label:FootnoteLabel ']_' &InlineMarkupFollowing {
    return new Elements.FootnoteReference({ children: [new Text({ value: label })] });
  }

CitationReference =
  '[' label:ReferenceName ']_' &InlineMarkupFollowing {
    return new Elements.CitationReference({ children: [new Text({ value: label })] });
  }

HyperlinkReference =
  AnonymousHyperlinkReference /
  AnonymousSimpleHyperlinkReference /
  NamedHyperlinkReference /
  NamedSimpleHyperlinkReference

NamedHyperlinkReference =
  ('`' !NormalizedToWhitespace)
  &{ markupEndString = '`_'; return true; }
  children:MarkupTail {
    return new Elements.Reference({ anonymous: false, simple: false, children });
  }

NamedSimpleHyperlinkReference =
  ref:HyperlinkReferenceName '_' &InlineMarkupFollowing {
    return new Elements.Reference({ anonymous: false, simple: true, children: [new Text({ value: ref })] });
  }

AnonymousHyperlinkReference =
  ('`' !NormalizedToWhitespace)
  &{ markupEndString = '`__'; return true; }
  children:MarkupTail {
    return new Elements.Reference({ anonymous: true, simple: false, children });
    return {children};
  }

AnonymousSimpleHyperlinkReference =
  ref:HyperlinkReferenceName '__' &InlineMarkupFollowing {
    return new Elements.Reference({ anonymous: true, simple: true, children: [new Text({ value: ref })] });
  }

// Reference
ReferenceName =
  head:AlphanumericAscii
  tail:(AlphanumericAscii / [-_.:+])+ {
    return head + tail.join('');
  }

HyperlinkReferenceName =
  head:AlphanumericAscii
  tail:(AlphanumericAscii / [-.:+])+ {
    return head + tail.join('');
  }

