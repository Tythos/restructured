LineBlock = NestedLineBlock / SimpleLineBlock

NestedLineBlock =
  indent:PushLineBlockIndent$
  head:Line tail:(Line / LineBlock)*
  PopLineBlockIndent$
  outer:LineBlock {
    var first = new Elements.LineBlock({ children: [head].concat(tail) });
    var children = [first].concat(outer.children);
    return new Elements.LineBlock({ children });
}

SimpleLineBlock = indent:PushLineBlockIndent$ block:(LineBolockMain / FailbackLineBlockIndent$) PopLineBlockIndent$ {
  return block;
}

LineBolockMain = head:Line tail:(Line / LineBlock)* &BlankLines {
  return new Elements.LineBlock({ children: [head, ...tail] });
}

Line = NonEmptyLine / EmptyLine

NonEmptyLine = SameIndent '| ' SameLineBlockIndent children:OnelineParagraph Newline {
  return new Elements.Line({ children });
}

EmptyLine = SameIndent '|' Whitespace* Newline {
  return new Elements.Line({ children: [] });
}

SameLineBlockIndent = i:Whitespace* &{
  return ParserUtil.calcIndentSize(i) === lineBlockState.current();
} {
  return i.join('');
}

DeepLineBlockIndent = i:Whitespace* &{
  return ParserUtil.calcIndentSize(i) > lineBlockState.current();
} {
  return i.join('');
}

PushLineBlockIndent$ =
  &(EmptyLine* SameIndent '| ' i:DeepLineBlockIndent &{
    lineBlockState.push(ParserUtil.calcIndentSize(i));
    return true;
  }) {
    return { width: lineBlockState.current(), offset: lineBlockState.diff() };
  }

PopLineBlockIndent$ = &{ lineBlockState.pop(); return true; }

FailbackLineBlockIndent$ = PopLineBlockIndent$ Fail$
