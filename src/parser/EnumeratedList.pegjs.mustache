EnumeratedList =
  BlankLines?
  &{ nextEnumeratorType = null; return true; }
  &(IsEnumeratedListItem)
  &{ enumeratedListState.startNewEnumeratedList(); return true; }
  head:EnumeratedListItem
  tail:(
    BlankLines?
    &{ nextEnumeratorType = currentEnumerator.sequence.type; return true; }
    &(IsEnumeratedListItem)
    &{ nextEnumeratorType = currentEnumerator.sequence.type; return true; }
    EnumeratedListItem
  )* {
    enumeratedListState.popEnumerator();
    var children = [head].concat(mapByIndex(tail, 4));
    return new Elements.EnumeratedList({ children: children });
  }

EnumerationSequence =
  AutoEnumerationSequence /
  ArabicNumeralsEnumerationSequence /
  UpperCaseRomanEnumerationSequence /
  LowerCaseRomanEnumerationSequence /
  UpperCaseAlphabetEnumerationSequence /
  LowerCaseAlphabetEnumerationSequence

AutoEnumerationSequence =
  '#' {
    return new Elements.EnumeratorSequence({ type: 'auto', value: '#' });
  }

ArabicNumeralsEnumerationSequence =
  &{
    return _.isNull(nextEnumeratorType) || nextEnumeratorType === 'arabic_numerals';
  } head:[1-9] tail:[0-9]* {
    return new Elements.EnumeratorSequence({ type: 'arabic_numerals', value: [head].concat(tail).join('') });
  } /
  &{
    return _.isNull(nextEnumeratorType) || nextEnumeratorType === 'arabic_numerals';
  } head:[0] {
    return new Elements.EnumeratorSequence({ type: 'arabic_numerals', value: head });
  }

UpperCaseAlphabetEnumerationSequence =
  &{
    return _.isNull(nextEnumeratorType) || nextEnumeratorType === 'uppercase_alphabet';
  } s:[A-Z] {
    return new Elements.EnumeratorSequence({ type: 'uppercase_alphabet', value: s });
  }

LowerCaseAlphabetEnumerationSequence =
  &{
    return _.isNull(nextEnumeratorType) || nextEnumeratorType === 'lowercase_alphabet';
  } s:[a-z] {
    return new Elements.EnumeratorSequence({ type: 'lowercase_alphabet', value: s });
  }

UpperCaseRomanEnumerationSequence =
  &{
    return _.isNull(nextEnumeratorType) || nextEnumeratorType === 'uppercase_roman';
  } s:[IVXLCDM]+ &{ return ParserUtil.isUpperRomanNumber(s.join('')); } {
    return new Elements.EnumeratorSequence({ type: 'uppercase_roman', value: s.join('') });
  }

LowerCaseRomanEnumerationSequence =
  &{
    return _.isNull(nextEnumeratorType) || nextEnumeratorType === 'lowercase_roman';
  } s:[ivxlcdm]+ &{ return ParserUtil.isLowerRomanNumber(s.join('')); } {
    return new Elements.EnumeratorSequence({ type: 'lowercase_roman', value: s.join('') });
  }

Enumerator =
  s:EnumerationSequence '.' {
    return new Elements.Enumerator({ sequence: s, format: 'period' });
  } /
  s:EnumerationSequence ')' {
    return new Elements.Enumerator({ sequence: s, format: 'right_parenthesis' });
  } /
  '(' s:EnumerationSequence ')' {
    return new Elements.Enumerator({ sequence: s, format: 'parentheses' });
  }

EnumeratedListItem =
  SameIndent
  e:Enumerator
  &{
    if (_.isNull(currentEnumerator)) {
      currentEnumerator = e;
      return true;
    }
    if (!currentEnumerator.isNext(e)) {
      return false;
    }
    currentEnumerator = e;
    return true;
  }
  body:(EnumeratedListItemBody / EmptyEnumeratedListItemBody) {
    return new Elements.ListItem({ children: body })
  }

IsEnumeratedListItem =
  SameIndent
  e1:Enumerator
  i1:Whitespace* RawLine
  (
    BlankLines /
    i2:Whitespace+ RawLine &{
      return currentIndentSize < ParserUtil.calcIndentSize(i2);
    } /
    &{ nextEnumeratorType = e1.sequence.type; return true; }
    SameIndent e2:Enumerator Whitespace+ RawLine &{
      return e1.isNext(e2);
    }
  )

EmptyEnumeratedListItemBody = Whitespace* Endline { return []; }
EnumeratedListItemBody = (EnumeratedListIndent body:BodyElement* Dedent) { return body; }

EnumeratedListIndent =
  i:Whitespace+ &(!NormalizedToWhitespace .) {
    indentState.push(currentIndentSize + ParserUtil.calcIndentSize(i) + currentEnumerator.width());
    indentState.ignore(location().end.line);
  } /
  (Whitespace* Newline)+ &DeepIndent i:Whitespace+ &(!NormalizedToWhitespace .) {
    indentState.push(ParserUtil.calcIndentSize(i));
    indentState.ignore(location().end.line);
  }
