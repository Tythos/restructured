EnumeratedList =
  BlankLines?
  &(IsEnumeratedListItem)
  &{
    enumeratorStack.push(currentEnumerator);
    currentEnumerator = null;
    return true;
  }
  head:EnumeratedListItem
  tail:(BlankLines? &(IsEnumeratedListItem) EnumeratedListItem)* {
    currentEnumerator = enumeratorStack.pop();
    var children = [head].concat(tail.map(function (t) { return t[2]; }));
    return new Elements.EnumeratedList({ children: children });
  }

EnumerationSequence =
  AutoEnumerationSequence /
  ArabicNumeralsEnumerationSequence /
  UpperCaseRomanEnumerationSequence /
  LowerCaseRomanEnumerationSequence /
  UpperCaseAlphabetEnumerationSequence /
  LowerCaseAlphabetEnumerationSequence

AutoEnumerationSequence =
  '#' {
    return new Elements.EnumeratorSequence({ type: 'auto', value: '#' });
  }

ArabicNumeralsEnumerationSequence =
  &{
    return _.isNull(currentEnumerator) || currentEnumerator.sequence.isArabicNumerals();
  } head:[1-9] tail:[0-9]* {
    return new Elements.EnumeratorSequence({ type: 'arabic_numerals', value: [head].concat(tail).join('') });
  } /
  &{
    return _.isNull(currentEnumerator) || currentEnumerator.sequence.isArabicNumerals();
  } head:[0] {
    return new Elements.EnumeratorSequence({ type: 'arabic_numerals', value: head });
  }

UpperCaseAlphabetEnumerationSequence =
  &{
    return _.isNull(currentEnumerator) || currentEnumerator.sequence.isUppercaseAlphabet();
  } s:[A-Z] {
    return new Elements.EnumeratorSequence({ type: 'uppercase_alphabet', value: s });
  }

LowerCaseAlphabetEnumerationSequence =
  &{
    return _.isNull(currentEnumerator) || currentEnumerator.sequence.isLowercaseAlphabet();
  } s:[a-z] {
    return new Elements.EnumeratorSequence({ type: 'lowercase_alphabet', value: s });
  }

UpperCaseRomanEnumerationSequence =
  &{
    return _.isNull(currentEnumerator) || currentEnumerator.sequence.isUppercaseRoman();
  } s:[IVXLCDM]+ &{ return ParserUtil.isUpperRomanNumber(s.join('')); } {
    return new Elements.EnumeratorSequence({ type: 'uppercase_roman', value: s.join('') });
  }

LowerCaseRomanEnumerationSequence =
  &{
    return _.isNull(currentEnumerator) || currentEnumerator.sequence.isLowercaseRoman();
  } s:[ivxlcdm]+ &{ return ParserUtil.isLowerRomanNumber(s.join('')); } {
    return new Elements.EnumeratorSequence({ type: 'lowercase_roman', value: s.join('') });
  }

Enumerator =
  s:EnumerationSequence '.' {
    return new Elements.Enumerator({ sequence: s, format: 'period' });
  } /
  s:EnumerationSequence ')' {
    return new Elements.Enumerator({ sequence: s, format: 'right_parenthesis' });
  } /
  '(' s:EnumerationSequence ')' {
    return new Elements.Enumerator({ sequence: s, format: 'parentheses' });
  }

EnumeratedListItem =
  SameIndent
  e:Enumerator
  &{
    if (_.isNull(currentEnumerator)) {
      currentEnumerator = e;
      return true;
    }
    if (!currentEnumerator.isNext(e)) {
      return false;
    }
    currentEnumerator = e;
    return true;
  }
  body:(EmptyEnumeratedListItemBody / EnumeratedListItemBody) {
    return new Elements.ListItem({ children: body })
  }

IsEnumeratedListItem =
  SameIndent
  &{
    enumeratorStack.push(currentEnumerator);
    currentEnumerator = null;
    return true;
  }
  e1:(Enumerator &{
    currentEnumerator = enumeratorStack.pop();
    return true;
  } / &{
    currentEnumerator = enumeratorStack.pop();
    return false;
  })
  i1:Whitespace+ RawLine
  (
    BlankLines /
    i2:Whitespace+ RawLine &{
      return currentIndentSize + e1[0].width() + ParserUtil.calcIndentSize(i1) === ParserUtil.calcIndentSize(i2);
    } /
    &{
      enumeratorStack.push(currentEnumerator);
      currentEnumerator = e1[0];
      return true;
    }
    (
      SameIndent e2:Enumerator Whitespace+ RawLine &{
        if (e1[0].isNext(e2)) {
          currentEnumerator = enumeratorStack.pop();
          return true;
        }
        return false;
      } / &{
        currentEnumerator = enumeratorStack.pop();
        return false;
      }
    )
  )

EmptyEnumeratedListItemBody = Whitespace* Endline { return []; }
EnumeratedListItemBody = (EnumeratedListIndent body:BodyElement* Dedent) { return body; }

EnumeratedListIndent =
  i:Whitespace+ {
    var nextIndentSize = currentIndentSize + ParserUtil.calcIndentSize(i) + currentEnumerator.width();
    indentIgnoreLine = location().start.line;
    indentSizeStack.push(currentIndentSize);
    currentIndentSize = nextIndentSize;
  }
