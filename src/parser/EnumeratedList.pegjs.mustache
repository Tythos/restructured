EnumeratedList =
  BeginEnumeratedList$
    children:(EnumeratedListItem+ / EndEnumeratedList$ Fail$)
  EndEnumeratedList$
  &BlankLines {
    return new Elements.EnumeratedList({ children });
  }

BeginEnumeratedList$ = &(BlankLines? &{ enumeratedListState.begin(); return true; })
EndEnumeratedList$ = &{ enumeratedListState.end(); return true; }

EnumeratedListItem = blanks:BlankLines? SameIndent e:NextEnumerator item:ListItem {
  return item;
}

Enumerator =
  s:EnumerationSequence '.' { return new Elements.Enumerator({ sequence: s, format: 'period' }); } /
  s:EnumerationSequence ')' { return new Elements.Enumerator({ sequence: s, format: 'right_parenthesis' }); } /
  '(' s:EnumerationSequence ')' { return new Elements.Enumerator({ sequence: s, format: 'parentheses' }); }

NextEnumerator = e:Enumerator &{
  if (!enumeratedListState.isNext(e)) { return false; }
  enumeratedListState.set(e);
  return true;
} { return e; }

EnumerationSequence =
  AutoEnumerationSequence /
  AcceptNumeral$ e:ArabicNumeralsEnumerationSequence { return e; } /
  AcceptUpperCaseRoman$ e:UpperCaseRomanEnumerationSequence { return e; } /
  AcceptLowerCaseRoman$ e:LowerCaseRomanEnumerationSequence { return e; } /
  AcceptUpperCaseAlphabet$ e:UpperCaseAlphabetEnumerationSequence { return e; } /
  AcceptLowerCaseAlphabet$ e:LowerCaseAlphabetEnumerationSequence { return e; }

AcceptNumeral$ = &{ return enumeratedListState.isNextType('arabic_numerals'); }
AcceptUpperCaseRoman$ = &{ return enumeratedListState.isNextType('uppercase_roman'); }
AcceptLowerCaseRoman$ = &{ return enumeratedListState.isNextType('lowercase_roman'); }
AcceptUpperCaseAlphabet$ = &{ return enumeratedListState.isNextType('uppercase_alphabet'); }
AcceptLowerCaseAlphabet$ = &{ return enumeratedListState.isNextType('lowercase_alphabet'); }

AutoEnumerationSequence = '#' { return new Elements.EnumeratorSequence({ type: 'auto', value: '#' }); }

ArabicNumeralsEnumerationSequence = head:[1-9] tail:[0-9]* {
  return new Elements.EnumeratorSequence({ type: 'arabic_numerals', value: [head].concat(tail).join('') });
} / head:[0] {
  return new Elements.EnumeratorSequence({ type: 'arabic_numerals', value: head });
}

UpperCaseAlphabetEnumerationSequence = s:[A-Z] {
  return new Elements.EnumeratorSequence({ type: 'uppercase_alphabet', value: s });
}

LowerCaseAlphabetEnumerationSequence = s:[a-z] {
  return new Elements.EnumeratorSequence({ type: 'lowercase_alphabet', value: s });
}

UpperCaseRomanEnumerationSequence = s:[IVXLCDM]+ &{ return ParserUtil.isUpperRomanNumber(s.join('')); } {
  return new Elements.EnumeratorSequence({ type: 'uppercase_roman', value: s.join('') });
}

LowerCaseRomanEnumerationSequence = s:[ivxlcdm]+ &{ return ParserUtil.isLowerRomanNumber(s.join('')); } {
  return new Elements.EnumeratorSequence({ type: 'lowercase_roman', value: s.join('') });
}
