EnumeratedList =
  BlankLines?
  &(SameIndent Enumerator NormalizedToWhitespace)
  &{
    enumeratedMarkerStack.push(currentEnumeratedMarker);
    currentEnumeratedMarker = null;
    return true;
  }
  head:EnumeratedListItem
  tail:(BlankLines? EnumeratedListItem)* {
    currentEnumeratedMarker = enumeratedMarkerStack.pop();
    var children = [head].concat(tail.map(function (t) { return t[1]; }));
    return new Elements.EnumeratedList({ children: children });
  }

EnumerationSequence =
  AutoEnumerationSequence /
  ArabicNumeralsEnumerationSequence /
  // UpperCaseAlphabetEnumerationSequence /
  // LowerCaseAlphabetEnumerationSequence
  UpperCaseRomanEnumerationSequence /
  LowerCaseRomanEnumerationSequence

AutoEnumerationSequence = '#'
ArabicNumeralsEnumerationSequence = head:[0-9] tail:[0-9]* { return [head].concat(tail).join(''); }
UpperCaseAlphabetEnumerationSequence = [A-Z]
LowerCaseAlphabetEnumerationSequence = [a-z]
UpperCaseRomanEnumerationSequence =
  s:[IVXLCDM]+
  &{ ParserUtil.isUpperRomanNumber(s.join('')); } {
    return s.join('');
  }
LowerCaseRomanEnumerationSequence =
  s:[ivxlcdm]+
  &{ ParserUtil.isUpperRomanNumber(s.join('')); } {
    return s.join('');
  }

Enumerator =
  e:EnumerationSequence '.' { return e + '.'; } /
  e:EnumerationSequence ')' { return e + ')'; } /
  '(' e:EnumerationSequence ')' { return '(' + e + ')'; }

EnumeratedListItem =
  SameIndent
  marker:Enumerator
  &{
    if (_.isNull(currentEnumeratedMarker)) {
      currentEnumeratedMarker = marker;
      return true;
    }
    // return marker === currentEnumeratedMarker;
    return true;
  }
  body:(EmptyEnumeratedListItemBody / EnumeratedListItemBody) {
    return new Elements.ListItem({ children: body })
  }

EmptyEnumeratedListItemBody = Whitespace* Endline { return []; }
EnumeratedListItemBody = (EnumeratedListIndent body:BodyElement* Dedent) { return body; }

EnumeratedListIndent =
  i:Whitespace+ {
    var nextIndentSize = currentIndentSize + ParserUtil.calcIndentSize(i) + currentEnumeratedMarker.length;
    indentIgnoreLine = location().start.line;
    indentSizeStack.push(currentIndentSize);
    currentIndentSize = nextIndentSize;
  }
