LiteralBlock = SameIndent block:LiteralBlockWithoutIndent { return block; }

LiteralBlockWithoutIndent = IndentedLiteralBlockWithoutIndent / QuotedLiteralBlockWithoutIndent

IndentedLiteralBlockWithoutIndent =
  '::' Whitespace* Newline
  BlankLines
  indent:PushCommonIndent$
    lines:((
      Whitespace* Newline !(BlankLines? ShallowIndent) /
      &SameOrDeepIndent w:Whitespace+ RawLine
    )+ / FailbackIndent$)
  PopIndent$ {
    var children = _.map(lines, function (line) {
      if (!_.isUndefined(line[0])) {
        var indentSize = ParserUtil.calcIndentSize(line[0].join(''));
        var text = _.repeat(' ', Math.max(0, indentSize - indent.width));
      } else {
        var indentSize = ParserUtil.calcIndentSize(line[1].join(''));
        var text = _.repeat(' ', indentSize - indent.width) + line[2].raw;
      }
      return new Elements.Text({ value: text } );
    });
    return new Elements.LiteralBlock({ children });
  }

QuotedLiteralBlockWithoutIndent =
  '::' Whitespace* Newline BlankLines
  SetQuoting$
    lines:(SameIndent IsValidQuoting$ NotEmptyRawLine)+
  &BlankLines {
    var children = _.map(lines, function (line) {
      return new Elements.Text({ value: line[2].raw } );
    });
    return new Elements.LiteralBlock({ children });
  }

Quoting = ('!' / '"' / '#' / '$' / '%' / '&'/ "'" / '(' / ')' /
           '*' / '+' / ',' / '-' / '.' / '/' / ':' / ';' / '<' /
           '=' / '>' / '?' / '@' / '[' / '\\' / ']' / '^' / '_' /
           '`' / '{' / '|' / '}' / '~')

SetQuoting$ = &(SameIndent q:Quoting  &{ literalBlockQuoting = q; return true; })
IsValidQuoting$ = &(q:Quoting  &{ return literalBlockQuoting === q; })
