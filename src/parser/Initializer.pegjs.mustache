{
  // utilities
  var _ = require('lodash');
  var ParserUtil = require('./ParserUtil').default;

  function mapByIndex(seq, index) {
    return _.map(seq, function (v) { return v[index]; });
  };

  // nodes
  var Elements = require('./Elements').default;
  var Text = Elements.Text;

  // variables
  var currentIndentSize = 0;
  var indentIgnoreLine = null;
  var nextIndentSize = null;

  var markupEndString = null;
  var attributesIndentList = [];

  var literalBlockQuoting = null;

  var enumeratedListState = (function () {
    var nextEnumeratorType = null;
    var enumeratorStack = [];
    var currentEnumerator = null;

    return {
      begin: function () {
        enumeratorStack.push(currentEnumerator);
        currentEnumerator = null;
        nextEnumeratorType = null;
      },
      end: function () {
        currentEnumerator = enumeratorStack.pop();
        if (!_.isNull(currentEnumerator)) {
          nextEnumeratorType = currentEnumerator.sequence.type;
        }
      },
      set: function (e) {
        currentEnumerator = e;
        nextEnumeratorType = currentEnumerator.sequence.type;
      },
      isNext: function (e) {
        return _.isNull(currentEnumerator) || currentEnumerator.isNext(e);
      },
      isNextType: function (type) {
        return _.isNull(currentEnumerator) || nextEnumeratorType === type;
      },
    };
  }());

  var indentState = (function () {
    var indentSizeStack = [];

    return {
      push: function (indentSize) {
        indentSizeStack.push(currentIndentSize);
        currentIndentSize = indentSize;
      },
      pop: function () {
        currentIndentSize = indentSizeStack.pop();
      },
      ignore: function (line) {
        indentIgnoreLine = line;
      },

      lastIndentDiff: function () {
        if (indentSizeStack.length === 0) {
          return currentIndentSize;
        }
        return currentIndentSize - indentSizeStack[indentSizeStack.length - 1];
      },
    };
  }());

  var literalBlockState = (function () {
    var currentIndentSize = -1;
    var indentSizeStack = [];

    return {
      current: function() {
        return currentIndentSize;
      },
      push: function (indentSize) {
        indentSizeStack.push(currentIndentSize);
        currentIndentSize = indentSize;
      },
      pop: function () {
        currentIndentSize = indentSizeStack.pop();
      },
      diff: function () {
        if (indentSizeStack.length === 0) {
          return currentIndentSize;
        }
        return currentIndentSize - indentSizeStack[indentSizeStack.length - 1];
      },
    };
  }());

  var bulletListState = (function () {
    var stack = [];
    var current = null;
    return {
      pushBullet: function (bullet) {
        stack.push(current);
        current = bullet;
      },
      popBullet: function () {
        current = stack.pop();
      },
      isSameBullet: function (bullet) {
        return current === bullet;
      },
    };
  }());

  var sectionState = (function () {
    var stack = [];
    var currentIndex = -1;
    return {
      isSubSection: function (c, overline) {
        if (currentIndex === stack.length - 1) {
          for (var i = 0, len = stack.length; i < len; i++) {
            if (stack[i].c === c && stack[i].overline === overline) {
              return false;
            }
          }
          return true;
        }
        var next = stack[currentIndex + 1];
        return next.c === c && next.overline === overline;
      },
      setNextSection: function (c, overline) {
        for (var i = 0, len = stack.length; i < len; i++) {
          if (stack[i].c === c && stack[i].overline === overline) {
            currentIndex = i;
            return;
          }
        }
        stack.push({ c: c, overline: overline });
        currentIndex = stack.length - 1;
      },
      popSection: function () {
        --currentIndex;
      },
    };
  }());
}
